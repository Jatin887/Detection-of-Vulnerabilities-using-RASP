class NeedleApp {

    constructor(sdk_version) {
        try {
            this.agent_version = sdk_version;
            this.app_id = '';
            this.api_key = '';
            this.server_url = '';
            this.platform = 'nodejs';
            this.framework = '';
            this.project_dir = '';
            this.settings = {};
            this.app_active = false;
            this.errors = [];
            this.total_requests = 0;
            this.mal_requests = [];
            this.module_requests = [];
            this.modules_used = [];
            this.test_mode = false;
            this.debug_mode = false;
            this.instr_list = {};
            this.is_instr = false;
            this.libinjec = null;
            this.xss_pattern = null;
            this.cmdi_pattern = null;
            this.mdbi_pattern = null;
            this.sqli_pattern = null;
            this.scanner_pattern = null;
            this.shock_pattern = null;
            this.show_blocked_message = false;
            this.packages = [];
            this.express_app = null;
            this.perf_data = [];
            this.perf_active = true;
            this.perf_collect = true;
            this.perf_count = 0;
            this.perf_max = 100;
            this.perf_interval = 12;
            this.perf_collect_ts = Date.now();
            this.module_list = [
                //{'sec_module': 'lfi', 'lang_module': 'module.load'},
                {'sec_module': 'xss', 'lang_module': 'express.response.send'},
                {'sec_module': 'sqli', 'lang_module': 'mysql.connection.query'},
                {'sec_module': 'sqli', 'lang_module': 'pg.Client.query'},
                {'sec_module': 'cmdi', 'lang_module': 'child_process.exec'},
                {'sec_module': 'lfi', 'lang_module': 'fs.readFile'},
                {'sec_module': 'lfi', 'lang_module': 'fs.readFileSync'},
                {'sec_module': 'lfi', 'lang_module': 'fs.open'},
                {'sec_module': 'lfi', 'lang_module': 'fs.openSync'},
                {'sec_module': 'ssrf', 'lang_module': 'http.get'},
                {'sec_module': 'ssrf', 'lang_module': 'https.get'}
            ];

        } catch (e) {
            g_needle_app.add_error('Error initialising SDK:', e.toString());
        }
    }

    // Detect project framework
    detect_framework() {
        var detected = false;
        // Check for Express framework
        try {
            const express = require('express');
            this.framework = 'express';

            // Add router middleware
            require('./wrappers.js').init_express();

            detected = true;
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error detecting framework:', error_data);
        }

        return detected;
    }

    read_package_info() {
        // Read package.json
        var packages = [];
        try {
            var str_packages = require('fs').readFileSync('package.json', 'utf-8');
            var obj_packages = JSON.parse(str_packages)['dependencies'];

            for (var key in obj_packages) {
                packages.push({
                    'name': key,
                    'version': obj_packages[key]
                });
            }
            g_needle_app.packages = packages;

        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error sending packages data: ', error_data);
        }
    }

    call_server_api() {
        // Get settings every 1 minute
        try {
            g_needle_app.get_settings();
            var get_settings_interval = 1 * 60 * 1000;
            setInterval(function () {
                g_needle_app.get_settings();
            }, get_settings_interval);
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error getting wally settings: ', error_data);
        }

        // Send req data every minute
        try {
            var send_data_interval = 1 * 60 * 1000;
            setInterval(function () {
                g_needle_app.send_req_data();
            }, send_data_interval);
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error sending requests data: ', error_data);
        }

        // Send app info every 5 minutes
        try {
            g_needle_app.send_app_info();
            var send_info_interval = 5 * 60 * 1000;
            setInterval(function () {
                g_needle_app.send_app_info();
            }, send_info_interval);
        } catch (e) {
            g_agent_errors.push({
                platform: g_agent_platform,
                error: 'Error sending app info',
                error_data: e.toString()
            });
        }
    }

    // Make HTTP request
    execute_http_request(url, data, callback) {
        const axios = require('axios');
        try {
            axios.post(url, data)
                .then((response) => {
                    callback(null, response.data);
                })
                .catch((e) => {
                    callback(e, null);
                })
        } catch (e) {
            g_needle_app.add_error('Error calling URL:', e.toString());
        }
    }

    //Get payload for API calls
    get_api_payload() {
        var test_mode = 0;
        if (this.test_mode) test_mode = 1;

        var payload = {
            'app_id': this.app_id,
            'api_key': this.api_key,
            'test_mode': test_mode,
            'libinjec': 0,
            'platform': this.platform,
            'framework': this.framework,
            'agent_version': this.agent_version
        };
        return payload;
    }

    // Get App settings
    get_settings() {
        try {
            // Get settings
            var settings_url = this.server_url + '/api/get_app_settings';
            var payload = this.get_api_payload();
            var data = JSON.stringify(payload);

            g_needle_app.execute_http_request(settings_url, data, (error, body) => {

                if (error) {
                    var error_data = '';
                    if (error) error_data = error.toString();

                    g_needle_app.add_error('Needle.sh: Error! fetching app settings:', error_data);
                    return;
                }

                if (g_needle_app.debug_mode) console.log('Needle.sh: Got app settings:', body); // Print the HTML for the Google homepage.

                if (body['error'] === '') {
                    g_needle_app.settings = body['settings'];

                    if (g_needle_app.settings['active'] === 1) {
                        g_needle_app.app_active = true;
                    } else {
                        g_needle_app.app_active = false;
                    }

                    g_needle_app.instrument_modules();

                } else {
                    g_needle_app.add_error('Error in get_settings response: ', body);
                }

            })

        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error fetching app settings: ', error_data);
        }
    }


    // Send requests data
    send_req_data() {
        try {
            // If agent is not active, skip send
            if (!(g_needle_app.app_active && (g_needle_app.total_requests > 0 || g_needle_app.mal_requests.length > 0))) return;

            var total = g_needle_app.total_requests;
            g_needle_app.total_requests = 0;
            var mal = g_needle_app.mal_requests;
            g_needle_app.mal_requests = [];
            var mod_req = g_needle_app.module_requests;
            g_needle_app.module_requests = [];

            var settings_url = this.server_url + '/api/store_requests';
            var data = g_needle_app.get_api_payload();

            if (total > 0) data['total_requests'] = total;
            if (mal.length > 0) data['mal_requests'] = mal;
            if (mod_req.length > 0) data['mod_requests'] = mod_req;

            data = JSON.stringify(data);

            g_needle_app.execute_http_request(settings_url, data, (error, body) => {
                if (error) {
                    var error_data = '';
                    if (error) error_data = error.toString();
                    g_needle_app.add_error('Error sending req data:', error_data);
                }

                if (g_needle_app.debug_mode) console.log('Needle.sh: Response from sending req data =', body);
            })
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error sending requests data: ', error_data);
        }
    }

    // Send app info
    send_app_info() {
        try {
            var settings_url = this.server_url + '/api/store_app_info';
            var data = g_needle_app.get_api_payload();

            if (g_needle_app.packages.length > 0) {
                data['packages'] = g_needle_app.packages;
                g_needle_app.packages = [];
            }

            if (g_needle_app.errors.length > 0) {
                data['agent_errors'] = g_needle_app.errors;
                g_needle_app.errors = [];
            }

            if (g_needle_app.modules_used.length > 0) {
                data['modules_used'] = g_needle_app.modules_used;
                g_needle_app.modules_used = [];
            }

            if (g_needle_app.perf_data.length > 0) {
                data['perf_data'] = g_needle_app.perf_data;
                g_needle_app.perf_data = [];
            }

            var json_data = JSON.stringify(data);

            g_needle_app.execute_http_request(settings_url, json_data, (error, body) => {
                if (error) {
                    var error_data = '';
                    if (error) error_data = error.toString();
                    g_needle_app.add_error('Error sending app info: ', error_data);
                }

                if (g_needle_app.debug_mode) console.log('Needle.sh: Response from sending app info:', body);
            })
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error sending app info:', error_data);
        }
    }

    // Get security headers to be inserted
    get_sec_headers() {
        var headers = {};

        try {
            if (g_needle_app.app_active) {

                if (this.settings.hasOwnProperty('headers')) {
                    headers = this.settings['headers'];
                }
            }
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Error getting security headers: ', error_data);
        }

        return headers;
    }

    // Add error
    add_error(error, error_data) {
        if (this.debug_mode) console.log('Needle.sh: Error! ', error);
        this.errors.push({
            'platform': this.platform,
            'error': error,
            'error_data': error_data
        })
    }

    add_module(type, pkg, method='') {
        var module = {
            'type': type,
            'package': pkg,
            'method': method
        };
        if (!is_obj_in_array(module, g_needle_app.modules_used)) g_needle_app.modules_used.push(module);
    }

    add_instr_details(sec_module, module_name, orig_method) {

        var instr_details = new InstrMethod(sec_module, module_name, orig_method, true);
        g_needle_app.instr_list[module_name] = instr_details;
    }

    remove_instr_details(sec_module, module_name) {

        delete g_needle_app.instr_list[module_name];
    }

    is_instrumented(module_name) {
        var is_instr = false;

        if (g_needle_app.instr_list[module_name] && g_needle_app.instr_list[module_name].is_instr) {
            is_instr = true;
        }

        return is_instr;
    }

    clean_server_values(arg_name, arg_value) {
        try {
            // Check if argument value is credit-card info
            var pattern = new RegExp('(d[ -]*){13,16}', 'i');

            //Check for sensitive types of arguments
            var sensitive_arg_names = ['password', 'passwd', 'api_key', 'apikey', 'access_token', 'secret', 'authorization'];

            if (sensitive_arg_names.indexOf(arg_name) > -1 || arg_value.match(pattern) !== null) {
                arg_value = '[Sensitive data removed by Needle.sh]';
            }

        } catch (e) {
            g_needle_app.add_error('Checking sensitive data:', e.toString());
        }

        return {
            'arg_name': arg_name,
            'arg_value': arg_value
        };
    }

    // Add malicious request
    add_mal_request(action, reason, arg_type, arg_name, arg_value, req_data) {

        // Check for sensitive data
        var cleaned_arg_data = g_needle_app.clean_server_values(arg_name, arg_value);

        var mal_req = {};
        mal_req['type'] = action;
        mal_req['reason'] = reason;
        mal_req['arg_type'] = arg_type;
        mal_req['arg_name'] = cleaned_arg_data['arg_name'];
        mal_req['arg_value'] = cleaned_arg_data['arg_value'];
        mal_req['client_ip'] = req_data.remote_addr;
        mal_req['http_method'] = req_data.request_method;
        mal_req['server'] = req_data.http_host;
        mal_req['path'] = req_data.path_info;
        mal_req['user_agent'] = req_data.http_user_agent;

        if (g_needle_app.debug_mode) console.log('Needle.sh: Adding incident: ', mal_req);

        g_needle_app.mal_requests.push(mal_req);
    }

    // Increment module request count
    inc_mod_requests(sec_module, module_name) {
        var index = -1;
        for (var i = 0; i < g_needle_app.module_requests.length; i++) {
            if (g_needle_app.module_requests[i]['sec_module'] === sec_module &&
                g_needle_app.module_requests[i]['lang_module'] === module_name) {
                index = i;
                break;
            }
        }

        if (index === -1) {
            g_needle_app.module_requests.push({'sec_module': sec_module, 'lang_module': module_name, 'count': 1});
        } else {
            g_needle_app.module_requests[index]['count']++;
        }
    }

    get_thread_req_data() {
        var req_data = null;
        try {
            var needle_namespace = needle_get_namespace('needle_namespace');
            req_data = needle_namespace.get('req_data');
        } catch (e) {
            g_needle_app.add_error('Needle.sh: Error! Thread-level request data not found:', e.toString());
        }

        return req_data;
    }

    // Return content for blocked message
    get_blocked_page_content(module_id = '') {
        var str_content = '';

        if (g_needle_app.show_blocked_message) {
            var module_name = '';

            if (module_id === 'sqli') module_name = 'SQL injection';
            if (module_id === 'xss') module_name = 'Cross-site Scripting(XSS)';
            if (module_id === 'cmdi') module_name = 'Command injection';
            if (module_id === 'scan') module_name = 'Security scanner';
            if (module_id === 'shock') module_name = 'Shellshock';
            if (module_id === 'lfi') module_name = 'Local File Inclusion (LFI)';
            if (module_id === 'ssrf') module_name = 'Server Side Request Forgery (SSRF)';

            str_content = 'Blocked by Needle.sh! Attack type: ' + module_name;
        }

        return str_content;
    }

    // Get XSS pattern
    get_xss_pattern() {
        try {
            if (!g_needle_app.xss_pattern) {
                const lines = require('fs').readFileSync(__dirname + '/data/js_event', 'utf-8').split('\n');
                var str_pattern = '';
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i].trim();
                    if (line === '' || line.charAt(0) === '#') continue;
                    str_pattern += line + '|';
                }

                // Remove trailing '|'
                str_pattern = str_pattern.replace(/\|\s*$/, "");
                g_needle_app.xss_pattern = new RegExp('(<[\\s]*script[\\s]*[>]*|javascript:|javascript&colon;|FSCommand)|\\b(' + str_pattern + ')\\b', 'i');
            }
        } catch (e) {
            g_needle_app.add_error('Error creating XSS pattern: ', e.toString());
        }
        return g_needle_app.xss_pattern;
    }

    // Check if app is active
    is_app_active() {
        return g_needle_app.app_active;
    }

    module_active(sec_module) {
        var active = false;
        var action = '';

        try {
            if (g_needle_app.app_active && g_needle_app.settings.hasOwnProperty(sec_module) && g_needle_app.settings[sec_module]['active'] === 1) {
                active = true;
                action = g_needle_app.settings[sec_module]['action'];
            }
        } catch (e) {
            g_needle_app.add_error('Error checking module active: xss: ', e.toString());
        }

        return {
            'active': active,
            'action': action
        };
    }

    // Get security scanner pattern
    get_scanner_pattern() {
        try {
            if (!g_needle_app.scanner_pattern) {
                var lines = require('fs').readFileSync(__dirname + '/data/scan', 'utf-8').split('\n');
                var str_pattern = '';
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i].trim();
                    if (line === '' || line.charAt(0) === '#') continue;
                    str_pattern += line + '|';
                }

                // Remove trailing '|'
                str_pattern = str_pattern.replace(/\|\s*$/, "");
                g_needle_app.scanner_pattern = '\\b(' + str_pattern + ')\\b';
            }
        } catch (e) {
            g_needle_app.add_error('Error creating scanner pattern: ', e.toString());
        }

        return g_needle_app.scanner_pattern;
    }

    get_shock_pattern() {
        if (!g_needle_app.shock_pattern) {
            g_needle_app.shock_pattern = new RegExp('^\\(\\s*\\)\\s+{', 'i');
        }
        return g_needle_app.shock_pattern;
    }

    get_sqli_pattern() {
        if (!g_needle_app.sqli_pattern) {
            g_needle_app.sqli_pattern = new RegExp('\\b(select|update|insert|alter|create|drop|delete|merge|union|show|exec|or|and|order|sleep|having)\\b|(&&|\\|\\|)', 'i');
        }
        return g_needle_app.sqli_pattern;
    }

    get_cmdi_pattern() {
        if (!g_needle_app.cmdi_pattern) {
            var lines = require('fs').readFileSync(__dirname + '/data/unix_cmd', 'utf-8').split('\n');
            var str_pattern = '';
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i].trim();
                if (line === '' || line.charAt(0) === '#') continue;

                // Remove trailing '+'
                str_pattern += line.replace(/\+\s*$/, "") + '|';
            }
            // Remove trailing '|'
            str_pattern = str_pattern.replace(/\|\s*$/, "");
            str_pattern = '(^|\\s|;|&&|\\|\\||&|\\|)(' + str_pattern + ')($|\\s|;|&&|\\|\\||&|\\||<)|(\\*|\\?)';
            g_needle_app.cmdi_pattern = new RegExp(str_pattern, 'i');

        }

        return g_needle_app.cmdi_pattern;
    }

    instrument_module(sec_module, lang_module) {
        try {
            var is_module_active;
            if (sec_module === 'init') {
                is_module_active = true;
            } else {
                var settings = g_needle_app.module_active(sec_module);
                is_module_active = settings['active'];
            }

            if (is_module_active && !g_needle_app.is_instrumented(lang_module)) {
                // Instrument module
                if (g_needle_app.debug_mode) console.log('Needle.sh: Instrumenting:', sec_module, lang_module);

                set_wrapper(lang_module, true);

                // Add instrumentation record
                g_needle_app.add_instr_details(sec_module, lang_module, null);

            } else if (!is_module_active && g_needle_app.is_instrumented(lang_module)) {
                // Instrument module
                if (g_needle_app.debug_mode) console.log('Needle.sh: Un-instrumenting:', sec_module, lang_module);

                set_wrapper(lang_module, false);

                g_needle_app.remove_instr_details(sec_module, lang_module);
            }
        } catch (e) {
            g_needle_app.add_error('Needle.sh: Error! instrumenting '+lang_module, e.toString());
        }
    }

    instrument_modules() {
        for (var i=0; i<g_needle_app.module_list.length; i++) {
            var module = g_needle_app.module_list[i];
            var sec_module = module['sec_module'];
            var lang_module = module['lang_module'];

            g_needle_app.instrument_module(sec_module, lang_module);
        }
    }

    check_perf_collect() {
        if (!g_needle_app.perf_active) return false;

        if (g_needle_app.perf_collect) {
            if (g_needle_app.perf_count > g_needle_app.perf_max) {
                g_needle_app.perf_collect = false;
                g_needle_app.perf_collect_ts = Date.now() + g_needle_app.perf_interval * 3600 * 1000;
            }
        } else {
            // Check if collection should be turned on
            if (Date.now() > g_needle_app.perf_collect_ts) {
                g_needle_app.perf_collect = true;
                g_needle_app.perf_count = 0;
            }
        }

        return g_needle_app.perf_collect;
    }

    add_perf_marker(req_data, sec_module, lang_module, type, ts) {
        if (this.check_perf_collect()) {
            var p = new PerfMarker(sec_module, lang_module, type, ts);
            req_data.perf_data.push(p);
        }
    }

    add_perf_time(req_data, sec_module, lang_module, time) {
        if (this.check_perf_collect()) {
            var p = new PerfTime(sec_module, lang_module, time);
            req_data.perf_data.push(p);
        }
    }

    add_perf_record(req_data) {
        if (this.check_perf_collect()) {
            var p = new PerfRecord(req_data.path_info, req_data.req_start_ts, req_data.perf_data);
            g_needle_app.perf_data.push(p);
            g_needle_app.perf_count += 1;
        }
    }
}

function init_needle(debug = false, show_blocked_message = false, sdk_version = '') {
    g_needle_app = new NeedleApp(sdk_version);

    g_needle_app.debug_mode = debug;
    g_needle_app.show_blocked_message = show_blocked_message;

    require('./wrappers').init_wrapper_store();

    if (!g_needle_app.detect_framework()) {
        console.log('Needle.sh: Error detecting web framework. Stopping agent.');
        return;
    }

    var needle_settings;
    try {
        var content = require('fs').readFileSync('needle.json', 'utf-8');
        needle_settings = JSON.parse(content);

        g_needle_app.app_id = needle_settings['app_id'];
        g_needle_app.api_key = needle_settings['api_key'];
        g_needle_app.server_url = needle_settings['server_url'];
        var test_mode = needle_settings['test_mode'];
        g_needle_app.test_mode = false;
        if (test_mode === 1) {
            g_needle_app.test_mode = true;
            console.log('Needle.sh: Running agent in test mode')
        }

    } catch (e) {
        var error_data = '';
        if (e) error_data = e.toString();
        g_needle_app.add_error('Error opening file needle.json. Trying needle.ini', error_data);
    }

    if (g_needle_app.app_id === '' || g_needle_app.api_key === '' || g_needle_app.server_url === '') {
        var lines = [];
        try {
            lines = require('fs').readFileSync('needle.ini', 'utf-8').split('\n');
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Needle.sh: Error opening file needle.ini. Stopped agent.', error_data);
            return;
        }

        try {
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];

                if (line.trim() === '' || line.charAt(0) === '#') continue;

                var s = line.split('=');

                if (s[0] === 'app_id') g_needle_app.app_id = s[1];
                if (s[0] === 'api_key') g_needle_app.api_key = s[1];
                if (s[0] === 'server_url') g_needle_app.server_url = s[1];
                if (s[0] === 'test_mode') test_mode = s[1];

                g_needle_app.test_mode = false;
                if (test_mode === '1') {
                    g_needle_app.test_mode = true;
                    console.log('Needle.sh: Running agent in test mode')
                }
            }

            if (g_needle_app.app_id === '' || g_needle_app.api_key === '' || g_needle_app.server_url === '') {
                console.log('Needle.sh: Incorrect settings. Stopping agent.');
                return;
            }
        } catch (e) {
            var error_data = '';
            if (e) error_data = e.toString();
            g_needle_app.add_error('Needle.sh: Error reading needle_settings.ini. Stopping agent.', error_data);
            return;
        }
    }

    g_needle_app.read_package_info();

    // Start the API loop
    g_needle_app.call_server_api();
}

function get_needle_app() {
    return g_needle_app;
}


const InstrMethod = require('./classes.js').InstrMethod;
var needle_create_namespace = require('cls-hooked').createNamespace;
var needle_get_namespace = require('cls-hooked').getNamespace;
const is_obj_in_array = require('./utilities').is_obj_in_array;
const set_wrapper = require('./wrappers').set_wrapper;
const get_wrapper = require('./wrappers').get_wrapper;
const PerfMarker = require('./classes.js').PerfMarker;
const PerfTime = require('./classes.js').PerfTime;
const PerfRecord = require('./classes.js').PerfRecord;

// Global NeedleApp instance
var g_needle_app;

module.exports = {
    init_needle: init_needle,
    NeedleApp: NeedleApp,
    get_needle_app: get_needle_app
};