function init_wrapper_store() {
    g_wrappers = [];
    var lang_module = '';

    /*try {
        lang_module = 'module.load';
        const module = require('module');
        add_wrapper_record(lang_module, module._load, wrapper_module_load);
    } catch (e) {
    }*/

    try {
        lang_module = 'express.router.middleware';
        const express = require('express');
        add_wrapper_record(lang_module, express.Router, wrapper_express_middleware);
    } catch (e) {
    }

    try {
        lang_module = 'mysql.connection.query';
        var package_path = require('path').dirname(require.resolve("mysql/package.json"));
        const connection = require(package_path + '/lib/Connection');
        add_wrapper_record(lang_module, connection.prototype.query, wrapper_mysql_query);
    } catch (e) {
    }

    try {
        lang_module = 'pg.Client.query';
        const client = require("pg").Client;
        add_wrapper_record(lang_module, client.prototype.query, wrapper_pg_query);
    } catch (e) {
    }

    try {
        lang_module = 'express.response.send';
        const express = require('express');
        add_wrapper_record(lang_module, express.response.send, wrapper_express_response);
    } catch (e) {
    }

    try {
        lang_module = 'child_process.exec';
        const child_process = require('child_process');
        add_wrapper_record(lang_module, child_process.exec, wrapper_cmd_exec);
    } catch (e) {
    }

    try {
        lang_module = 'fs.readFile';
        const fs = require('fs');
        add_wrapper_record(lang_module, fs.readFile, wrapper_fs_readFile);
    } catch (e) {
    }

    try {
        lang_module = 'fs.readFileSync';
        const fs = require('fs');
        add_wrapper_record(lang_module, fs.readFileSync, wrapper_fs_readFileSync);
    } catch (e) {
    }

    try {
        lang_module = 'fs.open';
        const fs = require('fs');
        add_wrapper_record(lang_module, fs.open, wrapper_fs_open);
    } catch (e) {
    }

    try {
        lang_module = 'fs.openSync';
        const fs = require('fs');
        add_wrapper_record(lang_module, fs.openSync, wrapper_fs_openSync);
    } catch (e) {
    }

    try {
        lang_module = 'http.get';
        const http = require('http');
        add_wrapper_record(lang_module, http.get, wrapper_http_get);
    } catch (e) {
    }

    try {
        lang_module = 'https.get';
        const https = require('https');
        add_wrapper_record(lang_module, https.get, wrapper_https_get);
    } catch (e) {
    }
}

function add_wrapper_record(lang_module, orig, wrapper) {
    g_wrappers.push({'lang_module': lang_module, 'orig': orig, 'wrapper': wrapper});
}

function get_orig(lang_module) {
    var orig = null;

    for (var i = 0; i < g_wrappers.length; i++) {
        var w = g_wrappers[i];
        if (w['lang_module'] === lang_module) {
            orig = w['orig'];
            break;
        }
    }
    return orig;
}

function get_wrapper(lang_module) {
    var wrapper = null;

    for (var i = 0; i < g_wrappers.length; i++) {
        var w = g_wrappers[i];
        if (w['lang_module'] === lang_module) {
            wrapper = w['wrapper'];
            break;
        }
    }
    return wrapper;
}

function set_wrapper(lang_module, set_flag) {
    var needle_app = require('./needle_app.js').get_needle_app();
    var func = null;

    if (set_flag) {
        func = get_wrapper(lang_module)
    } else {
        func = get_orig(lang_module)
    }

    if (lang_module === 'module.load') {
        const module = require('module');
        module._load = func;
    }

    if (lang_module === 'express.response.send') {
        const express = require('express');
        express.response.send = func;
    }

    if (lang_module === 'mysql.connection.query') {
        var package_path = require('path').dirname(require.resolve("mysql/package.json"));
        const connection = require(package_path + '/lib/Connection');
        connection.prototype.query = func;
    }

    if (lang_module === 'pg.Client.query') {
        const client = require("pg").Client;
        client.prototype.query = func;
    }

    if (lang_module === 'child_process.exec') {
        const child_process = require('child_process');
        child_process.exec = func;
    }

    if (lang_module === 'fs.readFile') {
        const fs = require('fs');
        fs.readFile = func;
    }

    if (lang_module === 'fs.readFileSync') {
        const fs = require('fs');
        fs.readFileSync = func;
    }

    if (lang_module === 'fs.open') {
        const fs = require('fs');
        fs.open = func;
    }

    if (lang_module === 'fs.openSync') {
        const fs = require('fs');
        fs.openSync = func;
    }

    if (lang_module === 'http.get') {
        const http = require('http');
        http.get = func;
    }

    if (lang_module === 'https.get') {
        const https = require('https');
        https.get = func;
    }
}

// Add HTTP headers to response
function add_response_headers(response) {
    var needle_app = require('./needle_app.js').get_needle_app();
    if (needle_app.debug_mode) console.log('Needle.sh: Adding security headers');

    var headers = needle_app.get_sec_headers();
    try {
        for (var header_name in headers) {
            response.set(header_name, headers[header_name]);
        }
    } catch (e) {
        needle_app.add_error('Needle.sh: Error! inserting HTTP header. Headers =', headers);
    }
}

// Check security scanners
function check_security_scanners(req_data) {
    var needle_app = require('./needle_app.js').get_needle_app();
    var match = {
        'match': false
    };

    var scanner_pattern = needle_app.get_scanner_pattern();

    if (!scanner_pattern) return match;

    try {
        // Check in user agent
        var value = req_data.http_user_agent;

        if (value.trim() !== '' && value.match(scanner_pattern)) {
            match = {
                'match': true,
                'type': 'http_header',
                'name': 'user_agent',
                'value': value
            };
        }
    } catch (e) {
        needle_app.add_error('Error while checking security scanner:', e.toString());
    }

    return match;
}


// Check shellshock
function check_shellshock(req_headers) {
    var needle_app = require('./needle_app.js').get_needle_app();
    var match = {
        'match': false
    };

    var pattern = needle_app.get_shock_pattern();

    if (!pattern) return match;

    try {
        for (var i = 0; i < req_headers.length; i++) {
            var header_name = req_headers[i]['key'];
            var value = req_headers[i]['value'];

            if (value.trim() !== '' && value.match(pattern)) {
                match = {
                    'match': true,
                    'type': 'http_header',
                    'name': header_name,
                    'value': value
                };
            }
        }
    } catch (e) {
        needle_app.add_error('Error while checking security scanner:', e.toString());
    }

    return match;
}


function check_sqli(content, req_data) {
    var needle_app = require('./needle_app.js').get_needle_app();
    if (needle_app.debug_mode) console.log('Needle.sh: Checking sqli in:', content);

    var sqli_pattern = needle_app.get_sqli_pattern();

    var match = {
        'match': false
    };

    try {
        for (var i = 0; i < req_data.data.length; i++) {
            var arg = req_data.data[i];

            var value = arg['value'].trim();
            if (value === '') continue;

            if (content.indexOf(value) !== -1 && value.match(sqli_pattern) !== null && value.split(" ").length > 1) {
                match = {
                    'match': true,
                    'type': arg['type'],
                    'name': arg['name'],
                    'value': value
                };
                break;
            }
        }
    } catch (e) {
        needle_app.add_error('Error while checking SQLi:', e.toString());
    }

    return match;
}


function module_sqli_check(lang_module, orig_object, orig_arguments) {
    var ts_fn_start = Date.now();
    var needle_app = require('./needle_app.js').get_needle_app();
    var sec_module = 'sqli';

    needle_app.add_module(sec_module, lang_module);

    var sqli_settings = needle_app.module_active(sec_module);

    var req_data = needle_app.get_thread_req_data();
    if (!req_data) {
        return get_orig(lang_module).apply(orig_object, orig_arguments);
    } else {
        try {

            needle_app.inc_mod_requests(sec_module, lang_module);

            var query = '';
            var is_object = false;
            if (lang_module === 'mysql.connection.query' && typeof (arguments[0]) == 'object') {
                query = arguments[0]['sql'];
                is_object = true;
            } else {
                query = orig_arguments[0];
            }

            var match = check_sqli(query, req_data);

            if (match['match']) {
                if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type:', sec_module);

                req_data.is_incident = true;
                req_data.incident_action = sqli_settings['action'];
                req_data.incident_module = sec_module;
                // Add mal request
                needle_app.add_mal_request(sqli_settings['action'], sec_module, match['type'], match['name'], match['value'], req_data);

                if (sqli_settings['action'] === 'block') {
                    // Replace query with comment
                    var sql_comment = '-- Blocked by Needle.sh';
                    if (is_object) {
                        orig_arguments[0]['sql'] = sql_comment;
                    } else {
                        orig_arguments[0] = sql_comment;
                    }
                }
            }
        } catch (e) {
            needle_app.add_error('Error while checking ' + sec_module, e.toString());
        }

        try {
            var fn_time = Date.now() - ts_fn_start;
            needle_app.add_perf_time(req_data, sec_module, lang_module, fn_time);
        } catch (e) {
            needle_app.add_error('Error while adding perf record:'+lang_module, e.toString());
        }

    }
    return get_orig(lang_module).apply(orig_object, orig_arguments);
}

function wrapper_mysql_query() {
    var lang_module = 'mysql.connection.query';
    return module_sqli_check(lang_module, this, arguments);
}

function wrapper_pg_query() {
    var lang_module = 'pg.Client.query';
    return module_sqli_check(lang_module, this, arguments);
}

function wrapper_cmd_exec() {
    var ts_fn_start = Date.now();
    var lang_module = 'child_process.exec';
    var needle_app = require('./needle_app.js').get_needle_app();
    var sec_module = 'cmdi';

    needle_app.add_module(sec_module, lang_module);

    var cmdi_settings = needle_app.module_active(sec_module);

    var req_data = needle_app.get_thread_req_data();
    if (!req_data) {
        needle_app.add_error('Getting request data from thread storage: ' + lang_module, '');
        return get_orig(lang_module).apply(this, arguments);
    }

    try {
        needle_app.inc_mod_requests(sec_module, lang_module);

        const command = arguments[0];
        var match = check_cmdi(command, req_data);
        if (match['match']) {
            if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type: Command Line Injection');

            if (cmdi_settings['action'] === 'block') {
                // Block query - replace with empty command
                arguments[0] = 'echo "command blocked by Needle.sh"';
            }
            req_data.is_incident = true;
            req_data.incident_action = cmdi_settings['action'];
            req_data.incident_module = sec_module;

            // Add mal request
            needle_app.add_mal_request(cmdi_settings['action'], sec_module, match['type'], match['name'], match['value'], req_data);
        }

    } catch (e) {
        needle_app.add_error('Needle.sh: Error while checking ' + sec_module, e.toString());
    }

    try {
        var fn_time = Date.now() - ts_fn_start;
        needle_app.add_perf_time(req_data, sec_module, lang_module, fn_time);
    } catch (e) {
        needle_app.add_error('Error while adding perf record:'+lang_module, e.toString());
    }

    return get_orig(lang_module).apply(this, arguments);
}

function check_cmdi(command, req_data) {
    var needle_app = require('./needle_app.js').get_needle_app();

    if (needle_app.debug_mode) console.log('Needle.sh: Checking cmdi');

    var cmdi_pattern = needle_app.get_cmdi_pattern();
    var flag = 0;
    var match = {
        'match': false
    };

    try {
        for (var i = 0; i < req_data.data.length; i++) {
            var arg = req_data.data[i];
            var value = arg['value'].trim();

            var remove_chars = ['\'', '"', '\\', '$@', '`']; // Remove characters that will be ignored by command shell
            for (var j = 0; j < remove_chars.length; j++) {
                var c = remove_chars[j];
                value = value.split(c).join('');
                command = command.split(c).join('');
            }

            if (value === '') continue;

            if (value.match(cmdi_pattern) !== null && command.indexOf(value) !== -1) {
                match = {
                    'match': true,
                    'type': arg['type'],
                    'name': arg['name'],
                    'value': value
                };
                break;
            }
        }
    } catch (e) {
        needle_app.add_error('Error while checking cmdi:', e.toString());
    }
    return match;
}

function wrapper_fs_readFile() {
    var lang_module = 'fs.readFile';
    return module_lfi_check(lang_module, this, arguments);
}

function wrapper_fs_readFileSync() {
    var lang_module = 'fs.readFileSync';
    return module_lfi_check(lang_module, this, arguments);
}

function wrapper_fs_open() {
    var lang_module = 'fs.open';
    return module_lfi_check(lang_module, this, arguments);
}

function wrapper_fs_openSync() {
    var lang_module = 'fs.openSync';
    return module_lfi_check(lang_module, this, arguments);
}

function module_lfi_check(lang_module, orig_object, orig_arguments) {
    var ts_fn_start = Date.now();
    var needle_app = require('./needle_app.js').get_needle_app();
    var sec_module = 'lfi';

    needle_app.add_module(sec_module, lang_module);

    var settings = needle_app.module_active(sec_module);

    var req_data = needle_app.get_thread_req_data();
    if (!req_data) {
        needle_app.add_error('Getting request data from thread storage: ' + lang_module, '');
        return get_orig(lang_module).apply(orig_object, orig_arguments);
    }

    try {
        needle_app.inc_mod_requests(sec_module, lang_module);

        const filepath = orig_arguments[0];
        var match = check_lfi(filepath, req_data);
        if (match['match']) {
            if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type: Local File Inclusion');

            if (settings['action'] === 'block') {
                // Block file open - replace with empty file path
                orig_arguments[0] = '';
            }
            req_data.is_incident = true;
            req_data.incident_action = settings['action'];
            req_data.incident_module = sec_module;

            // Add mal request
            needle_app.add_mal_request(settings['action'], sec_module, match['type'], match['name'], match['value'], req_data);
        }

    } catch (e) {
        needle_app.add_error('Needle.sh: Error while checking ' + sec_module, e.toString());
    }

    try {
        var fn_time = Date.now() - ts_fn_start;
        needle_app.add_perf_time(req_data, sec_module, lang_module, fn_time);
    } catch (e) {
        needle_app.add_error('Error while adding perf record:'+lang_module, e.toString());
    }

    return get_orig(lang_module).apply(orig_object, orig_arguments);
}

function check_lfi(filepath, req_data) {
    var needle_app = require('./needle_app.js').get_needle_app();

    if (needle_app.debug_mode) console.log('Needle.sh: Checking lfi:', filepath);

    var match = {
        'match': false
    };

    try {
        if(!(filepath.charAt(0) === '/' || filepath.indexOf('../') !== -1)) return match;

        for (var i = 0; i < req_data.data.length; i++) {
            var arg = req_data.data[i];
            var value = arg['value'].trim();

            if (value === '') continue;

            if(filepath === value && (filepath.charAt(0) === '/' || filepath.indexOf('../') !== -1)) {
                match = {
                    'match': true,
                    'type': arg['type'],
                    'name': arg['name'],
                    'value': value
                };
                break;
            }
        }
    } catch (e) {
        needle_app.add_error('Error while checking lfi:', e.toString());
    }
    return match;
}

function wrapper_http_get() {
    var lang_module = 'http.get';
    return module_ssrf_check(lang_module, this, arguments);
}

function wrapper_https_get() {
    var lang_module = 'https.get';
    return module_ssrf_check(lang_module, this, arguments);
}

function module_ssrf_check(lang_module, orig_object, orig_arguments) {
    var ts_fn_start = Date.now();
    var needle_app = require('./needle_app.js').get_needle_app();
    var sec_module = 'ssrf';

    needle_app.add_module(sec_module, lang_module);

    var settings = needle_app.module_active(sec_module);

    var req_data = needle_app.get_thread_req_data();
    if (!req_data) {
        needle_app.add_error('Getting request data from thread storage: ' + lang_module, '');
        return get_orig(lang_module).apply(orig_object, orig_arguments);
    }

    try {
        needle_app.inc_mod_requests(sec_module, lang_module);

        // Get host
        var url_string = '';
        if(lang_module === 'http.get' || lang_module === 'https.get') {
            url_string = orig_arguments[0];
        }

        var match = check_ssrf(url_string, req_data);

        if (match['match']) {
            if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type: Server Side Request Forgery (SSRF)');

            if (settings['action'] === 'block') {
                // Block URL fetch - replace with blank value
                orig_arguments[0] = '';
            }
            req_data.is_incident = true;
            req_data.incident_action = settings['action'];
            req_data.incident_module = sec_module;

            // Add mal request
            needle_app.add_mal_request(settings['action'], sec_module, match['type'], match['name'], match['value'], req_data);
        }
    } catch (e) {
        needle_app.add_error('Needle.sh: Error while checking ' + sec_module, e.toString());
    }

    try {
        var fn_time = Date.now() - ts_fn_start;
        needle_app.add_perf_time(req_data, sec_module, lang_module, fn_time);
    } catch (e) {
        needle_app.add_error('Error while adding perf record:'+lang_module, e.toString());
    }

    return get_orig(lang_module).apply(orig_object, orig_arguments);
}

function check_ssrf(url_string, req_data) {
    var needle_app = require('./needle_app.js').get_needle_app();

    if (needle_app.debug_mode) console.log('Needle.sh: Checking ssrf');

    var match = {
        'match': false
    };

    const url = require('url');
    var url_obj = url.parse(url_string);

    try {
        for (var i = 0; i < req_data.data.length; i++) {
            var arg = req_data.data[i];
            var value = arg['value'].trim();

            if (value === '') continue;

            // Check for IP address
            if(url_string === value) {
                if(check_private_ip(url_obj['host'])) {
                    match = {
                        'match': true,
                        'type': arg['type'],
                        'name': arg['name'],
                        'value': value
                    };
                    break;
                }
            }
        }
    } catch (e) {
        needle_app.add_error('Error while checking ssrf:', e.toString());
    }

    return match;
}

function int_to_ip (ip_int) {
    return ( (ip_int>>>24) +'.' + (ip_int>>16 & 255) +'.' + (ip_int>>8 & 255) +'.' + (ip_int & 255) );
}

function check_private_ip(host_string) {
    var prefixes = [
        "127.", "0.",
        "10.", "172.16.", "172.17.", "172.18.", "172.19.", "172.20.", "172.21.", "172.22.", "172.23.", "172.24.",
        "172.25.", "172.26.", "172.27.", "172.28.", "172.29.", "172.30.", "172.31.", "192.168.", "169.254.",
        "fc", "fe", "ff", "::1", "localhost"
    ];

    // Check if host is IP address or number
    var parts = host_string.split(".");
    var mod_parts = [];

    for (var i=0; i<parts.length; i++) {
        var p = parts[i];
        var mod_p = p;
        var is_int = false;

        // If hex, convert to dec
        if(p.startsWith('0x') || p.startsWith('0X')) {
            var s = p.slice(2);
            if (parseInt(s, 16).toString(16) === s) {
                is_int = true;
                mod_p = parseInt(p, 16).toString();
            }
        } else if(p.startsWith('0')) { // If octal, convert to dec
            var s = p.replace(/^0+/, '');
            if (parseInt(s).toString() === s) {
                is_int = true;
                mod_p = parseInt(p, 8).toString();
            }
        }

        if (parseInt(p).toString() === p) {
            is_int = true;
        }

        if (parts.length === 1 && is_int) {
            mod_p = int_to_ip(parseInt(mod_p))
        }

        mod_parts.push(mod_p);
    }
    var mod_host_string = mod_parts.join(".");

    var is_private = false;
    for (var i=0; i<prefixes.length; i++) {
        if (mod_host_string.startsWith(prefixes[i])) {
            is_private = true;
            break;
        }
    }

    return is_private;
}

function check_content_xss(content, req_data) {
    var needle_app = require('./needle_app.js').get_needle_app();

    if (needle_app.debug_mode) console.log('Needle.sh: Checking XSS');

    var xss_pattern = needle_app.get_xss_pattern();

    if (!xss_pattern) return {};

    var match = {
        'match': false
    };

    try {
        for (var i = 0; i < req_data.data.length; i++) {
            var arg = req_data.data[i];

            var value = arg['value'].trim();
            if (value === '') continue;

            if (content.indexOf(value) !== -1 && value.match(xss_pattern) !== null) {
                match = {
                    'match': true,
                    'type': arg['type'],
                    'name': arg['name'],
                    'value': value
                };
                break;
            }
        }
    } catch (e) {
        needle_app.add_error('Error while checking XSS:', e.toString());
    }

    return match;
}


function wrapper_express_response() {
    var ts_fn_start = Date.now();
    var lang_module = 'express.response.send';
    var sec_module = 'xss';
    var needle_app = require('./needle_app.js').get_needle_app();

    needle_app.add_module(sec_module, lang_module);

    var xss_settings = needle_app.module_active(sec_module);

    var req_data = needle_app.get_thread_req_data();
    if (!req_data) {
        needle_app.add_error('Getting request data from thread storage: ' + lang_module, '');
        return get_orig(lang_module).apply(this, arguments);
    }

    // Check if some incident already detected
    if (req_data.is_incident) {
        if (req_data.incident_action === 'block') {
            arguments[0] = needle_app.get_blocked_page_content(req_data.incident_module);
        }
    } else {
        try {
            needle_app.inc_mod_requests(sec_module, lang_module);

            // Check for XSS
            var content = arguments[0];

            var match = check_content_xss(content, req_data);

            if (match['match']) {
                if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type: XSS');

                if (xss_settings['action'] === 'block') {
                    // Show blocked message
                    arguments[0] = needle_app.get_blocked_page_content(sec_module);
                }

                // Add mal request
                needle_app.add_mal_request(xss_settings['action'], sec_module, match['type'], match['name'], match['value'], req_data);
            }
        } catch (e) {
            needle_app.add_error('Error while checking XSS', e.toString());
        }
    }

    try {
        var fn_time = Date.now() - ts_fn_start;
        needle_app.add_perf_time(req_data, sec_module, lang_module, fn_time);

        var req_time = Date.now() - req_data.req_start_ts;
        needle_app.add_perf_time(req_data, '_req', lang_module, req_time);

        needle_app.add_perf_record(req_data);
    } catch (e) {
        needle_app.add_error('Error while adding perf record:'+lang_module, e.toString());
    }

    return get_orig(lang_module).apply(this, arguments);
}

function wrapper_express_middleware(req, res, next) {
    var ts_fn_start = Date.now();
    var lang_module = 'express.router.middleware';
    var needle_app = require('./needle_app.js').get_needle_app();

    try {
        var req_data = needle_app.get_thread_req_data();
        if (req_data) {
            //if (needle_app.debug_mode) console.log('Needle.sh: Request already processed in another middleware. Skipping', req.path);
        }
    } catch (e) {
        console.log('Exception in middleware:', e);
    }

    if (needle_app.debug_mode) console.log('Needle.sh: Inside express middleware:', req.path);

    needle_app.add_module('middleware', lang_module);

    if (needle_app.is_app_active()) {
        var block_exec = false;
        var block_content = '';

        // Increment requests
        needle_app.total_requests += 1;
        needle_app.inc_mod_requests('add_headers', lang_module);

        try {
            // Add request data
            var request_data = new RequestData();

            request_data.req_start_ts = Date.now();
            request_data.remote_addr = req.headers['x-forwarded-for'] ||
                req.connection.remoteAddress ||
                req.socket.remoteAddress ||
                (req.connection.socket ? req.connection.socket.remoteAddress : null);
            request_data.request_method = req.method;
            // request_data.http_host = req.hostname;
            request_data.http_host = req.headers.host;
            request_data.path_info = req.path;
            request_data.http_user_agent = req.get('User-Agent');
            request_data.resp_obj = res;

            // Add req data to stack local storage
            var values = [];

            for (var key in req.query) {
                var value = req.query[key];
                values.push({
                    'type': 'get',
                    'name': key,
                    'value': value
                });
            }

            for (var key in req.body) {
                var value = req.body[key];
                values.push({
                    'type': 'post',
                    'name': key,
                    'value': value
                });
            }

            var path_args = req.path.split('/');
            for (var key in path_args) {
                var value = path_args[key];
                if (value === '') continue;
                values.push({
                    'type': 'path',
                    'name': 'path',
                    'value': value
                });
            }

            request_data.data = values;

            //add security headers
            add_response_headers(res);

            try {
                // Check for security scanners
                var sec_module = 'scan';
                var mod_settings = needle_app.module_active(sec_module);
                if (mod_settings['active']) {
                    if (needle_app.debug_mode) console.log('Needle.sh: Checking for Security scanners');
                    needle_app.inc_mod_requests(sec_module, lang_module);
                    var match = check_security_scanners(request_data);

                    if (match['match']) {
                        if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type: Security scanner');

                        request_data.is_incident = true;
                        request_data.incident_action = mod_settings['action'];
                        request_data.incident_module = sec_module;

                        // Add mal request
                        needle_app.add_mal_request(mod_settings['action'], sec_module, match['type'], match['name'],
                            match['value'], request_data);

                        if (mod_settings['action'] === 'block') {
                            block_exec = true;
                            block_content = needle_app.get_blocked_page_content(sec_module);
                        }
                    }
                }
            } catch (e) {
                needle_app.add_error('Checking security scanner', e.toString());
            }

            try {
                // Check for shellshcok
                var sec_module = 'shock';
                var mod_settings = needle_app.module_active(sec_module);
                if (mod_settings['active']) {
                    if (needle_app.debug_mode) console.log('Needle.sh: Checking for Shellshock');
                    needle_app.inc_mod_requests(sec_module, lang_module);
                    var req_headers = [];
                    for (var header_name in req.headers) {
                        var h = {'key': header_name, 'value': req.headers[header_name]};
                        req_headers.push(h);
                    }

                    var match = check_shellshock(req_headers);

                    if (match['match']) {
                        if (needle_app.debug_mode) console.log('Needle.sh: New Incident of type: Shellshock');

                        request_data.is_incident = true;
                        request_data.incident_action = mod_settings['action'];
                        request_data.incident_module = sec_module;

                        // Add mal request
                        needle_app.add_mal_request(mod_settings['action'], sec_module, match['type'], match['name'],
                            match['value'], request_data);

                        if (mod_settings['action'] === 'block') {
                            block_exec = true;
                            block_content = needle_app.get_blocked_page_content(sec_module);
                        }
                    }
                }
            } catch (e) {
                needle_app.add_error('Needle.sh: Error! checking shellshock', e.toString());
            }

            var needle_namespace = needle_create_namespace('needle_namespace');

            needle_namespace.run(function () {
                try {
                    if (needle_app.debug_mode) console.log('Needle.sh: Adding data to thread storage in module:', lang_module);
                    needle_namespace.set('req_data', request_data);
                } catch (e) {
                    needle_app.add_error('Adding request data to thread storage', e.toString());
                }

                try {
                    var fn_time = Date.now() - ts_fn_start;
                    needle_app.add_perf_time(request_data, '_basic', lang_module, fn_time);
                } catch (e) {
                    needle_app.add_error('Error while adding perf record:'+lang_module, e.toString());
                }

                // Important: Call next middleware in sequence
                if (block_exec) {
                    res.end(block_content);
                } else {
                    next();
                }

            });
        } catch (e) {
            needle_app.add_error('Adding request data to thread storage', e.toString());
        }
    } else {
        next();
    }
}

function init_express() {
    var needle_app = require('./needle_app.js').get_needle_app();
    var lang_module = 'express.router.middleware';
    console.log('Needle.sh: Adding express middleware');

    try {
        var express = require('express');
        express.Router = function () {
            var router = get_orig(lang_module).apply(this, arguments);

            // Add middleware to router
            router.use(get_wrapper(lang_module));
            return router;
        };
    } catch (e) {
        var error_data = '';
        if (e) error_data = e.toString();
        needle_app.add_error('Error adding Express middleware:', error_data);
    }
}

const RequestData = require('./classes').RequestData;
var needle_create_namespace = require('cls-hooked').createNamespace;
var needle_get_namespace = require('cls-hooked').getNamespace;
const get_needle_app = require('./needle_app.js').get_needle_app;

var g_wrappers;

module.exports = {
    init_wrapper_store: init_wrapper_store,
    get_wrapper: get_wrapper,
    set_wrapper: set_wrapper,
    init_express: init_express
};